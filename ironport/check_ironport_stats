#!/usr/bin/env python
# +----------------------------------------------------------------------+
# |                                                                      |
# |       _                      _   __  __                              |
# |      | |                    | | |  \/  |                             |
# |      | |_   _ _ __   ___  __| | | \  / | ___ _ __ ___   ___  _ __    |
# |  _   | | | | | '_ \ / _ \/ _` | | |\/| |/ _ \ '_ ` _ \ / _ \| '_ \   |
# | | |__| | |_| | | | |  __/ (_| | | |  | |  __/ | | | | | (_) | | | |  |
# |  \____/ \__,_|_| |_|\___|\__,_| |_|  |_|\___|_| |_| |_|\___/|_| |_|  |
# |                                                                      |
# | Author : Juned Memon            Email : junedm@tipsntraps.com        |
# +----------------------------------------------------------------------+

# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
# 02110-1301, USA.

# +----------------------------------------------------------------------+
#  Version : 1.0                                                        
#   Script  : check_ironport_stats                                                      
#   Notes   : check_ironport_stats will use to gete the status of IronPort
#  	    : This script connects to the Ironport and issues the command `status detail` and ` tophosts rcpts_sent` and then parses the
#	      Output and sends the details to Nagios Server using send_nsca
#                                                                       
# +----------------------------------------------------------------------+

from __future__ import division
import sys,re,argparse,commands

stats_line = "IronPort OK|"
nsca_host= "monitor.ningops.com"
nsca_conf ="/usr/local/etc/nagios/send_nsca_cmk.conf"

# +----------------------------------------------------------------------+
def get_status(user,host,ipt_cmd):
	connect="ssh -i keys/id_dsa "
	cmd=connect+user+"@"+host+ipt_cmd
	status, output = commands.getstatusoutput(cmd)
	return output
# +----------------------------------------------------------------------+

def process_status(output):
    global stats_line

    Gauges = ['RAM Utilization', 'Total', 'Disk IO Utilization', 'Logging Disk Usage', 
            'Current Outbound Conn', 'Active Recipients', 'Kilobytes Free']

    try:
        ready = False
        for line in output.splitlines():
            line = line.strip()
            line = line.replace(',','')
            line = line.replace('%','')
            line = line.replace('/','')
            line = line.replace('.','')
            items = line.split()
            if len(items) < 2:
                continue 
            if line.startswith('Rates'):
                ready = 'Rates'
                continue
            if line.startswith('Gauges'):
                ready = 'Gauges'
                continue
            if ready == 'Rates':
                m = re.match(r'([\S*\s*]*) (\d+) \s+ (\d+) \s+ (\d+)',line)
                if m == None:
                    continue
                stats_line = stats_line + "%s=%s " % (m.group(1).replace(' ',''), m.group(3))
                if m.group(1).replace(' ','') == 'DeliveredRecipients':
                    DeliveredRecipients = m.group(3)
                elif m.group(1).replace(' ','') == 'HardBouncedRecipients':
                    HardBouncedRecipients = m.group(3)
            if ready == 'Gauges':
                m = re.match(r'([\S*\s*]*) (\d+)',line)
                if m == None:
                    continue
                if m.group(1).strip() in Gauges:
                    stats_line = stats_line + "%s=%s " % (m.group(1).replace(' ',''), m.group(2))

        if (DeliveredRecipients > 2000):
            stats_line = stats_line + "HardBouncePercent=%d" % (int(HardBouncedRecipients) / int(DeliveredRecipients) * 100)
        else:
            # If volume is this low, the site is likely in maint mode, which would trigger a false alarm on hard bounce rate
            stats_line = stats_line + "HardBouncePercent=0%"
        
    except Exception,error:
        print >>sys.stderr, "ERROR: %s"%error
        return 1
    return stats_line
# +----------------------------------------------------------------------+
def get_domain_details(output):
    global stats_line

    Destinations = ['yahoo.com', 'hotmail.com', 'gmail.com', 'aol.com', 'bellsouth.net', 'comcast.net']
    Queue = {}

    for domain in Destinations:
        Queue[domain] = 0

    try:
        ready = False
        for line in output.splitlines():
            line = line.strip()
            line = line.replace(',','')
            line = line.replace('%','')
            line = line.replace('/','')
            if line.startswith('Status as of:'):
                ready = True
                continue
            m = re.match(r'\d+\s+(\S*)\s+(\d+)',line)
            if m == None:
                continue
            if m.group(1) in Destinations:
                Queue[m.group(1)] = m.group(2)

        for domain in Destinations:
           stats_line = stats_line + "%s=%s " % (domain,Queue[domain])
    except Exception,error:
        print >>sys.stderr, "ERROR: %s"%error
        return 1

    return stats_line
# +----------------------------------------------------------------------+
def send_to_nsca(host,status,service):
	global nsca_host, nsca_conf
	status=host+"\t"+service+"\t0\t"+status
	cmd='echo "'+ status+'" |send_nsca -H '+nsca_host+' -c '+nsca_conf
	status, output = commands.getstatusoutput(cmd)
	if status == 0:
                print "Successfully sent data to Nagios Server"
                exit (0)
        else:
                print "There seems to be some error in sending status to Nagios server"
		exit (1)

# +----------------------------------------------------------------------+
def main ():
        parser = argparse.ArgumentParser(description="Queries the livestatus for Build information")

        parser.add_argument("-H", "--host", help="host name to search for", required='True')
        args = parser.parse_args()
	output=get_status("zenoss",args.host,"status detail")
	status=get_domain_details(output)
 	send_to_nsca(args.host,status,"Ironport Status")	
	
# +----------------------------------------------------------------------+

if __name__ == "__main__":
         sys.exit(main())

