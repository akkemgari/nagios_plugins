#!/usr/bin/python
# +----------------------------------------------------------------------+
# |                                                                      |
# |       _                      _   __  __                              |
# |      | |                    | | |  \/  |                             |
# |      | |_   _ _ __   ___  __| | | \  / | ___ _ __ ___   ___  _ __    |
# |  _   | | | | | '_ \ / _ \/ _` | | |\/| |/ _ \ '_ ` _ \ / _ \| '_ \   |
# | | |__| | |_| | | | |  __/ (_| | | |  | |  __/ | | | | | (_) | | | |  |
# |  \____/ \__,_|_| |_|\___|\__,_| |_|  |_|\___|_| |_| |_|\___/|_| |_|  |
# |                                                                      |
# | Author : Juned Memon            Email : junedm@tipsntraps.com        |
# +----------------------------------------------------------------------+

# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
# 02110-1301, USA.

# +----------------------------------------------------------------------+
#  Version : 1.0                                                        
#   Script  : check_ironport_stats                                                      
#   Notes   : check_ironport_stats will use to gete the status of IronPort
#  	    : This script connects to the Ironport and issues the command `status detail` and ` tophosts rcpts_sent` and then parses the
#	      Output and to check the following parameters.
#['ActiveRecipients', 'CompletedRecipients', 'MessagesReceived', 'SoftBouncedEvents', 'DeliveredRecipients', 'LoggingDiskUsage', 'HardBouncePercent', 'HardBouncedRecipients', 'KilobytesFree', 'DiskIOUtilization', 'RAMUtilization', 'CPUUtilization', 'CurrentOutboundConn', 'RecipientsReceived'] from the output of `status detail` command. You can define the threshold of all these parameters in the Global Dictinary names threshold.

# It also get the domain and their queue from command `tophosts rcpts_sent` , for setting threshold on the domain queue , Add the item named `domain` in the threshold dict.
#                                                                       
# +----------------------------------------------------------------------+

from __future__ import division
import sys,re,argparse,commands

# +----------------------------------------------------------------------+
# Globals
nsca_host= "monitor.ningops.com"
nsca_conf ="/usr/local/etc/nagios/send_nsca_cmk.conf"
nagios_service="Ironport Status"
threshold={'ActiveRecipients': '90000', 'domain': '90000','HardBouncePercent' : '90'}

# +----------------------------------------------------------------------+
def get_status(user,host,ipt_cmd):
	connect="ssh -i keys/id_dsa "
	cmd=connect+user+"@"+host+" "+ipt_cmd
	status, output = commands.getstatusoutput(cmd)
        if status!=0:
		print output
		exit(1)
	else:
		return output
# +----------------------------------------------------------------------+

def process_status(output):
    stats_line = ";IronPort Status;"
    stats_q ={}
    Gauges = ['RAM Utilization', 'CPU Utilization', 'Disk IO Utilization', 'Logging Disk Usage', 
            'Current Outbound Conn', 'Active Recipients', 'Kilobytes Free']

    try:
        ready = False
        for line in output.splitlines():
            line = line.strip()
            line = line.replace(',','')
            line = line.replace('%','')
            line = line.replace('/','')
            line = line.replace('.','')
            line = line.replace('Total','CPU Utilization')
            items = line.split()
            if len(items) < 2:
                continue 
            if line.startswith('Rates'):
                ready = 'Rates'
                continue
            if line.startswith('Gauges'):
                ready = 'Gauges'
                continue
            if ready == 'Rates':
                m = re.match(r'([\S*\s*]*) (\d+) \s+ (\d+) \s+ (\d+)',line)
                if m == None:
                    continue
		stats_q[m.group(1).replace(' ','')]=m.group(3)
                if m.group(1).replace(' ','') == 'DeliveredRecipients':
                    DeliveredRecipients = m.group(3)
                elif m.group(1).replace(' ','') == 'HardBouncedRecipients':
                    HardBouncedRecipients = m.group(3)
            if ready == 'Gauges':
                m = re.match(r'([\S*\s*]*) (\d+)',line)
                if m == None:
                    continue
                if m.group(1).strip() in Gauges:
		    stats_q[m.group(1).replace(' ','')]=m.group(2)

        if (DeliveredRecipients > 2000):
	    stats_q["HardBouncePercent"]=int(HardBouncedRecipients) / int(DeliveredRecipients) * 100
        else:
            # If volume is this low, the site is likely in maint mode, which would trigger a false alarm on hard bounce rate
	    stats_q["HardBouncePercent"]="0"
        
    except Exception,error:
        print >>sys.stderr, "ERROR: %s"%error
        return 1
    return stats_q
# +----------------------------------------------------------------------+
def get_domain_details(output):
    domain_q = {}
    try:
        for line in output.splitlines():
            line = line.strip()
            line = line.replace(',','')
            line = line.replace('%','')
            line = line.replace('/','')
            if line.startswith('Status as of:'):
                continue
            m = re.match(r'\d+\s+(\S*)\s+(\d+)',line)
            if m == None:
                continue
            domain_q[m.group(1)] = m.group(2)

    except Exception,error:
        print >>sys.stderr, "ERROR: %s"%error
        exit(1)
    return domain_q
# +----------------------------------------------------------------------+
def send_to_nsca(host,nagios_service,return_code,plugin_output):
	global nsca_host, nsca_conf
	seprator="\t"
	nsca_data=host+seprator+nagios_service+seprator+str(return_code)+seprator+plugin_output
	cmd='echo "'+ nsca_data+'" |send_nsca -H '+nsca_host+' -c '+nsca_conf
	status, output = commands.getstatusoutput(cmd)
	if status == 0:
                print "Successfully sent detail of %s to Nagios Server for host %s. Status:%s" % (nagios_service,host,plugin_output)	
        else:
                print "There seems to be some error in sending status to Nagios server"
	return status

# +----------------------------------------------------------------------+
def generate_status(Queue):
        global threshold
        pat=r'.*[.].*$'
        status_line=""
        status=0
        for key,value in Queue.iteritems():
                key1=re.sub(pat,"domain",key)
                if key1 in threshold:
                        if int(Queue[key])> int(threshold[key1]):
                                status=2
                                status_line=status_line+key+":"+str(Queue[key])+ " "
                        else:
                                status=int(status) ^ 0
                                #status_line=status_line+key+":"+str(Queue[key])+ " "
                else:
                        #status_line=status_line+key+":"+str(Queue[key])+ " "
                        status=int(status) ^ 0
        if status==0:
                status_line="IronPort Status Ok "+status_line
        else:
                status_line="IronPort Status Critical:"+status_line
	status_line=status_line+"|"
	for i in ('ActiveRecipients','HardBouncePercent'):
		status_line=status_line+" "+i+"="+str(Queue[i])

        return status,status_line

# +----------------------------------------------------------------------+

def main ():
	global domainq_threshold,nagios_service
        parser = argparse.ArgumentParser(description="Queries the livestatus for Build information")

        parser.add_argument("-H", "--host", help="IronPort hosts.You Can provide multiple hosts.", required='True',nargs='+')
        args = parser.parse_args()
	for host in args.host:
		ironport_q={}
		output=get_status("zenoss",host,"tophosts rcpts_sent")
		ironport_q=get_domain_details(output)
		output=get_status("zenoss",host,"status detail")	
		ironport_q.update(process_status(output))
		status,status_line=generate_status(ironport_q)
		print status_line
		exit(status)
 		#send_to_nsca(host,nagios_service,status,status_line)	
# +----------------------------------------------------------------------+

if __name__ == "__main__":
         sys.exit(main())

